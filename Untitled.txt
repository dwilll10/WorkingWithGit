 04  TRANS-DT.
                   05  YEAR                          PIC X(4).           00105-00108
                   05  MONTH                         PIC X(2).           00109-00110
                   05  DAY-OF-MONTH                  PIC X(2).           00111-00112




groupedRows = dtInput.AsEnumerable().
    GroupBy(Function(row) row("YourColumnName").ToString).
    ToDictionary(Function(g) g.Key, Function(g) g.ToList())


System.Text.RegularExpressions.Regex _
    .Split(str_TransLayout, Environment.NewLine) _
    .FirstOrDefault(Function(line) System.Text.RegularExpressions.Regex.IsMatch(line, str_Value & ".*PIC"))

str_TransLayout.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries).FirstOrDefault(Function(line) line.Contains(str_Value+*+"PIC"))


ResultsDataPoint rdp =   caf8821ExtractionResults.GetField("NoGroup.NoCategory.CAF8821.designee1SentNoticeBox");
	ResultsContentReference rc = new ResultsContentReference();
	string validationErrors = "yes";
	ResultsValue rval = new ResultsValue(validationErrors,rc, 1.0f,1.0f);
	ResultsValue[] rvalArray = new ResultsValue[1];
	rvalArray[0] = rval;
	rdp.Values = rvalArray;



int resultsNumber = caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count = 0;

while (count < resultsNumber)
{
    var field = caf8821ExtractionResults.ResultsDocument.Fields[count];

    // Check if the field has at least one value
    if (field.Values != null && field.Values.Length > 0)
    {
        var fieldValue = field.Values[0]?.Value;

        // Check if value is not null or empty
        if (!string.IsNullOrEmpty(fieldValue))
        {
            Console.WriteLine("1");
            Console.WriteLine("Original value: " + fieldValue);

            if (fieldValue == "☐" || fieldValue == "☒")
            {
                Console.WriteLine("3");

                // Replace value
                fieldValue = fieldValue.Replace("☐", "No").Replace("☒", "Yes");

                // Set the updated value safely
                field.Values[0] = new UiPath.DocumentProcessing.Contracts.Results.ResultsValue
                {
                    Value = fieldValue
                };

                Console.WriteLine("Updated value: " + fieldValue);
            }
        }
        else
        {
            Console.WriteLine("Skipped null or empty field value at index: " + count);
        }
    }
    else
    {
        Console.WriteLine("Skipped field with no values at index: " + count);
    }

    count++;
}




int resultsNumber=caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count=0;

if (!string.IsNullOrEmpty(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value)){
while(resultsNumber>count){
if (!string.IsNullOrEmpty(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value)){
	Console.WriteLine("1");
 var fieldValue = caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value;
	Console.WriteLine("2");
	if( (fieldValue.Equals("☐" )) || (fieldValue.Equals("☒"))){
		Console.WriteLine("3");
		fieldValue = fieldValue.Replace("☐","No").Replace("☒","Yes");
		Console.WriteLine(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value);
	 caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value=fieldValue;
		
	}
	count++;
	}
}


int resultsNumber=caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count=0;

while(resultsNumber>count){
	Console.WriteLine("1");
 var fieldValue = caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value;
	Console.WriteLine("2");
	if( (fieldValue.Equals("☐" )) || (fieldValue.Equals("☒"))){
		Console.WriteLine("3");
		fieldValue = fieldValue.Replace("☐","No").Replace("☒","Yes");
		Console.WriteLine(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value);
	 caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value=fieldValue;
		
	}
	count++;
	}



int resultsNumber=caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count=0;

while(resultsNumber>count){
 string fieldValue = caf8821ExtractionResults.ResultsDocument.Fields(count).Values(0);
	if( fieldValue == "☐" || fieldValue=="☒"){
		fieldValue.Replace("☐","No").Replace("☒","Yes");
	 caf8821ExtractionResults.ResultsDocument.Fields(count).Values(0)=fieldValue;
	}
	
	}


matchedLine = yourLargeString.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries).FirstOrDefault(Function(line) line.Contains("your search text"))

var reader = new iText.Kernel.Pdf.PdfReader(pdfPath);
var pdfDoc = new iText.Kernel.Pdf.PdfDocument(reader);

try
{
    var form = iText.Forms.PdfAcroForm.GetAcroForm(pdfDoc, false);
    var xfaForm = form.GetXfaForm();

    if (xfaForm != null)
    {
        var dom = xfaForm.GetDomDocument();
        using (var sw = new System.IO.StringWriter())
        {
            dom.Save(sw);
            xfaXml = sw.ToString();
        }
    }
}
finally
{
    pdfDoc.Close();
    reader.Close();  // <- this is key
}

