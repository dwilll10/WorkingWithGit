String.Join(", ", str_Group1.Split({Environment.NewLine}, StringSplitOptions.None) _
    .SkipWhile(Function(line) Not (line.TrimStart().StartsWith(str_LinePrefix) AndAlso line.Contains(str_ExecVariable))) _
    .TakeWhile(Function(line, idx) idx = 0 OrElse Not line.TrimStart().StartsWith(str_LinePrefix)) _
    .SelectMany(Function(line) System.Text.RegularExpressions.Regex.Matches(line, "\d{5}-\d{5}").Cast(Of System.Text.RegularExpressions.Match)) _
    .Select(Function(m) m.Value))


"               04  FRM-1120-SECT-03-DETAIL-DATA.
                    05  ABLM-CODE                     PIC X(3).           00780-00782
                    05  INITIAL-RETURN-CD             PIC X.              00783-00783
                    05  MISSING-SCHEDULE-CD           PIC XX.             00784-00785
                    05  PENALTY-AND-INTEREST-CD       PIC X.              00786-00786
                    05  RESERVE-CD                    PIC X.              00787-00787
                    05  SPECIAL-DED-CD                PIC X.              00788-00788
                    05  AFFILIATION-CD                PIC X.              00789-00789
                    05  PARENT-NAME-CTRL              PIC X(4).           00790-00793
                    05  PARENT-EIN                    PIC X(9).           00794-00802
                    05  FOREIGN-COUNTRY-CD            PIC XX.             00803-00804
                    05  AUDIT-CD-FLD.
                        06  AUDIT-CD           OCCURS 15 TIMES   
                                                          PIC X.          00805-00819
                    05  INSTALLMNT-SALES-IND              PIC X.          00820-00820
                    05  ACCOUNTING-METHOD-CD              PIC X.          00821-00821
                    05  FRM-8844-EMPOWERMENT-ZONE-IND     PIC X.          00822-00822
                    05  NOL-CARRYOVER-CR-AMT           PIC S9(15)
                          SIGN IS LEADING SEPARATE CHARACTER.             00823-00838
                    05  NUM-OF-5472-ATTACHED-CNT          PIC X(3).       00839-00841
                    05  CHNGE-IN-OWNERSHIP-CKBX-IND       PIC X.          00842-00842
                    05  ASSET-DISPOSAL-CKBX-IND           PIC X.          00843-00843
                    05  SECT-351-TRANSFER-CKBX-IND        PIC X.          00844-00844
                    05  F8996-QUAL-OP-FUND-CD             PIC X.          00845-00845
                    05  F8996-QUAL-OP-FUND-AMT         PIC S9(13)V99 
                          SIGN IS LEADING SEPARATE CHARACTER.             00846-00861
                    05  DIGITAL-ASSET-CKBX             PIC 9.             00862-00862
                    05  CONTROL-GRP-CD                PIC X.              00863-00863
                    05  CORP-SECT59-PRIOR-YR-CKBX      PIC 9.             00864-00864
                    05  CORP-SECT59-CURR-TX-YR-CKBX    PIC 9.             00865-00865
                    05  CORP-SECT59-CURR-YR-CKBX       PIC 9.             00866-00866
                    05  STOCK-REPURCH-CKBX             PIC 9.             00867-00867
                    05  FRGN-CORP-CKBX                 PIC 9.             00868-00868
                    05  FRGN-CORP-REPRCH-CKBX          PIC 9.             00869-00869
                    05  CORP-PARENT-GRSS-RCPTS-CKBX    PIC 9.             00870-00870"




pattern = "^\s*\d{2}\s+" & System.Text.RegularExpressions.Regex.Escape(sectionHeader) & _
          ".*?(?=^\s*\d{2}\s+\S|\z)"

targetSection = System.Text.RegularExpressions.Regex.Match(
    str_Input,
    pattern,
    System.Text.RegularExpressions.RegexOptions.Multiline Or System.Text.RegularExpressions.RegexOptions.Singleline
).Value




"^\s*\d{2}\s+" & System.Text.RegularExpressions.Regex.Escape(sectionHeader) & "(?:\r?\n(?!\s*\d{2}\s).+)*"

targetSection = System.Text.RegularExpressions.Regex.Match(str_Input, pattern, System.Text.RegularExpressions.RegexOptions.Multiline).Value



matches = System.Text.RegularExpressions.Regex.Matches(
  str_Input,
  "^\s*\d{2}\s+.*(?:\r?\n(?!\s*\d{2}\s).*)*",
  System.Text.RegularExpressions.RegexOptions.Multiline)


pattern = "\d{2}\s+" & System.Text.RegularExpressions.Regex.Escape(sectionHeader) & _
          "(.*?\r?\n)*?" & _
          "\d{2}\s+" & fieldLabel & "(.*?\r?\n)*?" & _
          "(\d{5}-\d{5})"

match = System.Text.RegularExpressions.Regex.Match(str_Input, pattern, System.Text.RegularExpressions.RegexOptions.Singleline)


pattern = "\d{2}\s+" & System.Text.RegularExpressions.Regex.Escape(sectionHeader) & _
          ".*?\d{2}\s+" & fieldLabel & ".*?(?:\r?\n.*?)*?(\d{5}-\d{5})"


result = System.Text.RegularExpressions.Regex.Match(str_Input, pattern, System.Text.RegularExpressions.RegexOptions.Singleline).Groups(1).Value



04  FRM-1120-SECT-04-DETAIL-DATA.
                   05  TOT-ASSETS-END                PIC S9(15) 
                         SIGN IS LEADING SEPARATE CHARACTER.             00815-00830




05  SECTION-24-PRESENCE-PROFILE. 
                       06  SECTION-NUM               PIC 9(2).           00443-00444
                       06  SECTION-PRESENCE-IND      PIC 9.              00445-00445
                       06  SECTION-REQUIRED-IND      PIC 9.              00446-00446
                   05  SECTION-25-PRESENCE-PROFILE. 
                       06  SECTION-NUM               PIC 9(2).           00447-00448
                       06  SECTION-PRESENCE-IND      PIC 9.              00449-00449
                       06  SECTION-REQUIRED-IND      PIC 9.              00450-00450


updatedString = System.Text.RegularExpressions.Regex.Replace(myString, "^(NEW|MOV)", "", System.Text.RegularExpressions.RegexOptions.Multiline)

System.Text.RegularExpressions.Regex.Split(str_Input, "(?=^A)", System.Text.RegularExpressions.RegexOptions.Multiline)


str_Result = String.Join(", ", str_Layout.Split({Environment.NewLine}, StringSplitOptions.None) _
    .SkipWhile(Function(line) Not (line.TrimStart().StartsWith("04") AndAlso line.Contains("DLN"))) _
    .TakeWhile(Function(line, idx) idx = 0 OrElse Not line.TrimStart().StartsWith("04")) _
    .SelectMany(Function(line) System.Text.RegularExpressions.Regex.Matches(line, "\d{5}-\d{5}").Cast(Of System.Text.RegularExpressions.Match)) _
    .Select(Function(m) m.Value))


05  F8936-PT-V-REG-NUM              PIC X(12).        06284-06295
 05  F8936-PT-V-CREDIT-AMT           PIC S9(15)   


str_Result = String.Join(", ", str_Input.Split({Environment.NewLine}, StringSplitOptions.None).SkipWhile(Function(l) Not l.TrimStart().StartsWith("04") OrElse Not l.Contains("DLN.")).Skip(1).TakeWhile(Function(l) Not l.TrimStart().StartsWith("04")).SelectMany(Function(l) System.Text.RegularExpressions.Regex.Matches(l, "\d{5}-\d{5}").Cast(Of System.Text.RegularExpressions.Match)).Select(Function(m) m.Value))



04  DLN. 
                   05  BLOCK-DLN-WITHOUT-YR-COUNT.  
                       06  FILE-LOC-CD               PIC 9(2).           00010-00011
                       06  TAX-CLASS-CD              PIC 9.              00012-00012
                       06  DOC-CD                    PIC 9(2).           00013-00014
                       06  CTRL-DAY                  PIC 9(3).           00015-00017
                       06  BLOCK-NUM                 PIC 9(3).           00018-00020
                   05  SERIAL-NUM                    PIC 9(2).           00021-00022
                   05  YR-COUNT                      PIC 9.              00023-00023
               04  INPUT-SYSTEM-SOURCE-CODE          PIC X.              00024-00024



str_LargeText = String.Join(Environment.NewLine, str_LargeText.Split({Environment.NewLine}, StringSplitOptions.None).Where(Function(line) Not line.Contains("*")))


lst_LayoutLines.FindIndex(Function(line) line.Contains(str_ExecVariable) andAlso (line.StartsWith("MOV") or line.StartsWith("REN") or line.StartsWith("NEW") or line.StartsWith("0")))

str_TransLayout.Split({Environment.NewLine}, StringSplitOptions.None).FirstOrDefault(Function(line) line.Replace("NEW","").Replace("MOV","").Replace("REN").StartsWith("0") AndAlso line.Contains(str_ExecVariable))

str_TransLayout.Split({Environment.NewLine}, StringSplitOptions.None) _
    .FirstOrDefault(Function(line) line.StartsWith("0") AndAlso line.Contains(str_ExecVariable))



System.Text.RegularExpressions.Regex _
    .Split(str_TransLayout, Environment.NewLine) _
    .FirstOrDefault(Function(line) System.Text.RegularExpressions.Regex.IsMatch(line,  "0*" & str_ExecVariable))



lines = yourLongString.Split({Environment.NewLine}, StringSplitOptions.None).ToList()
startIndex = lines.FindIndex(Function(l) l.Contains("TRANS-DT"))
extractedLines = New List(Of String)

If startIndex >= 0 Then
    For i = startIndex + 1 To lines.Count - 1
        If String.IsNullOrWhiteSpace(lines(i)) Then
            Continue For
        End If
        
        If lines(i).StartsWith(" ") OrElse lines(i).StartsWith(vbTab) Then
            extractedLines.Add(lines(i).Trim())
        Else
            Exit For
        End If
    Next
End If

finalResult = String.Join(Environment.NewLine, extractedLines)


04  TRANS-DT.
                   05  YEAR                          PIC X(4).           00105-00108
                   05  MONTH                         PIC X(2).           00109-00110
                   05  DAY-OF-MONTH                  PIC X(2).           00111-00112




groupedRows = dtInput.AsEnumerable().
    GroupBy(Function(row) row("YourColumnName").ToString).
    ToDictionary(Function(g) g.Key, Function(g) g.ToList())


System.Text.RegularExpressions.Regex _
    .Split(str_TransLayout, Environment.NewLine) _
    .FirstOrDefault(Function(line) System.Text.RegularExpressions.Regex.IsMatch(line, str_Value & ".*PIC"))

str_TransLayout.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries).FirstOrDefault(Function(line) line.Contains(str_Value+*+"PIC"))


ResultsDataPoint rdp =   caf8821ExtractionResults.GetField("NoGroup.NoCategory.CAF8821.designee1SentNoticeBox");
	ResultsContentReference rc = new ResultsContentReference();
	string validationErrors = "yes";
	ResultsValue rval = new ResultsValue(validationErrors,rc, 1.0f,1.0f);
	ResultsValue[] rvalArray = new ResultsValue[1];
	rvalArray[0] = rval;
	rdp.Values = rvalArray;



int resultsNumber = caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count = 0;

while (count < resultsNumber)
{
    var field = caf8821ExtractionResults.ResultsDocument.Fields[count];

    // Check if the field has at least one value
    if (field.Values != null && field.Values.Length > 0)
    {
        var fieldValue = field.Values[0]?.Value;

        // Check if value is not null or empty
        if (!string.IsNullOrEmpty(fieldValue))
        {
            Console.WriteLine("1");
            Console.WriteLine("Original value: " + fieldValue);

            if (fieldValue == "☐" || fieldValue == "☒")
            {
                Console.WriteLine("3");

                // Replace value
                fieldValue = fieldValue.Replace("☐", "No").Replace("☒", "Yes");

                // Set the updated value safely
                field.Values[0] = new UiPath.DocumentProcessing.Contracts.Results.ResultsValue
                {
                    Value = fieldValue
                };

                Console.WriteLine("Updated value: " + fieldValue);
            }
        }
        else
        {
            Console.WriteLine("Skipped null or empty field value at index: " + count);
        }
    }
    else
    {
        Console.WriteLine("Skipped field with no values at index: " + count);
    }

    count++;
}




int resultsNumber=caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count=0;

if (!string.IsNullOrEmpty(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value)){
while(resultsNumber>count){
if (!string.IsNullOrEmpty(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value)){
	Console.WriteLine("1");
 var fieldValue = caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value;
	Console.WriteLine("2");
	if( (fieldValue.Equals("☐" )) || (fieldValue.Equals("☒"))){
		Console.WriteLine("3");
		fieldValue = fieldValue.Replace("☐","No").Replace("☒","Yes");
		Console.WriteLine(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value);
	 caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value=fieldValue;
		
	}
	count++;
	}
}


int resultsNumber=caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count=0;

while(resultsNumber>count){
	Console.WriteLine("1");
 var fieldValue = caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value;
	Console.WriteLine("2");
	if( (fieldValue.Equals("☐" )) || (fieldValue.Equals("☒"))){
		Console.WriteLine("3");
		fieldValue = fieldValue.Replace("☐","No").Replace("☒","Yes");
		Console.WriteLine(caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value);
	 caf8821ExtractionResults.ResultsDocument.Fields[count].Values[0].Value=fieldValue;
		
	}
	count++;
	}



int resultsNumber=caf8821ExtractionResults.ResultsDocument.Fields.Length;
int count=0;

while(resultsNumber>count){
 string fieldValue = caf8821ExtractionResults.ResultsDocument.Fields(count).Values(0);
	if( fieldValue == "☐" || fieldValue=="☒"){
		fieldValue.Replace("☐","No").Replace("☒","Yes");
	 caf8821ExtractionResults.ResultsDocument.Fields(count).Values(0)=fieldValue;
	}
	
	}


matchedLine = yourLargeString.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries).FirstOrDefault(Function(line) line.Contains("your search text"))

var reader = new iText.Kernel.Pdf.PdfReader(pdfPath);
var pdfDoc = new iText.Kernel.Pdf.PdfDocument(reader);

try
{
    var form = iText.Forms.PdfAcroForm.GetAcroForm(pdfDoc, false);
    var xfaForm = form.GetXfaForm();

    if (xfaForm != null)
    {
        var dom = xfaForm.GetDomDocument();
        using (var sw = new System.IO.StringWriter())
        {
            dom.Save(sw);
            xfaXml = sw.ToString();
        }
    }
}
finally
{
    pdfDoc.Close();
    reader.Close();  // <- this is key
}

